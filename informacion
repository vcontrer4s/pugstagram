complementos de vscode
	relative path => autocompleta las rutas de los archivos
	font awersome => buscamos logos svg 
	
para iniciar un proyecto
	creamos la carpeta
		mkdir proyecto
	iniciamos git
		git init
	iniciamos el proyecto
		npm init
	abrimos code con esa carpeta
		code .
	creamos la carpeta que ira a produccion
		public
	creamos la carpeta que tendra los archivos fuente
		src
	creamos el archivo principal
		index.js
	instalamos svelte
		npm i svelte --save
	en el proyecto de pugstagram usaremos babel para que la app sea compatible con todos los navegadores
		npm i @babel/core @babel/preset-env @babel/polyfill babel-loader svelte-loader --save-dev
	
	instalamos webpack 
		npm i webpack webpack-cli html-webpack-plugin --save-dev

	--save => es para instalar como dependencia de desarrollo


	creamos el archivo de configuracion de webpack, contendrá la ruta donde están los archivos a compilar, las extensiones, los nombres que dará una vez compilado, loader de svelte, loader de babel, que excluya la carpeta de node ya que no queremos compilarla...
		webpack.config.js

	creamos el html que contendrá la app
		public/index.html

revisar la convencion para la estructura de los archivos
	crear el archivo con lo mas sencillo para probar, solo un div
		containers/App.svelte
	
	crear el archivo que leerá la App.svelte y la empujara en el html
		index.js
	
	instalamos el entorno de desarrollo local de webpack
		npm i webpack-dev-server --save-dev
	
	modificamos el package.json para crear dos scripts
		1 para compilarlo y mandar el proy a producción
			"build": "webpack --mode production",
    
		2 para ejecutar el entorno de desarrollo local
			"start": "webpack-dev-server --open --mode development"

probamos...
npm run build
	crearía una carpeta dist
		bundle.js
		index.html

npm run start
	debería verse en el browser la app puerto 8080 por default

todo listo para iniciar cualquier proyecto
